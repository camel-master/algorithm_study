"""
BOJ 1149 RGB거리
https://www.acmicpc.net/problem/1149

집을 R, G, B로 칠하되 인접한 집과 다른 색으로 칠해져야 한다.
집의 개수가 1,000채이고 첫번 쨰 집은 R, G, B 중 하나를 선택할 수 있고
나머지 집의 경우 이전 집을 칠한 색을 제외한 나머지 두 색 중 하나를 선택할 수 있다.
따라서 모든 경우를 다 확인하려면 3 * 2^(n-1)번의 연산이 필요하다.

프로그래머스 땅따먹기와 유사한 문제다.

3
26 40 83
49 60 57 -> 89 86 83
13 89 99 -> 13 89 99
            96 171 185

  1 100 100
100   1 100 -> 200, 1, 101
100 100   1 -> 100, 100, 1
               101, 201, 2

  1, 100, 100
200, 101, 101
102, 201, 201

n = 1 일 떄 초기 값이 정해져있고
n = 2 부터
    n = 2에서 선택한 색과 다른 색의 n = 1에 해당하는 비용 둘과 n = 2에서 선택한 색상의 비용을 합산한 두 값을
    비교하여 더 작은 값을 n = 2에서 현재 선택한 색상의 비용으로 확정한다.
위의 과정을 n까지 반복한 후 n row의 최저 값을 구하면 답을 얻을 수 있다.
"""
N = int(input())
costs = list()
for _ in range(N):
    costs.append(list(map(int, input().split())))

for i in range(1, N):
    for j in range(3):
        pj_1 = 0
        pj_2 = 0
        if j == 0:
            pj_1 = 1
            pj_2 = 2
        elif j == 1:
            pj_1 = 0
            pj_2 = 2
        else:
            pj_1 = 0
            pj_2 = 1
        costs[i][j] += min(costs[i-1][pj_1], costs[i-1][pj_2])

print(min(costs[-1]))
